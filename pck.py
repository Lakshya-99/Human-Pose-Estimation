# -*- coding: utf-8 -*-
"""PCK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gWUHhUTQQmpllrF5t8eJqoYAKTxG2EWG
"""

def get_joint(column_index):
    y = np.zeros((2000, 2))
    for i in range(2):
        for j in range(2000):
            y[j, i] = data[i, column_index, j]
    return y

def get_images(n_images):
    imgs = []
    for i in range(n_images):
        path = '/content/gdrive/My Drive/images/im' + str('000' + str(i+1))[-4:] + '.jpg'
        img = np.array(cv2.imread(path, 1))
        imgs.append(img)
    return np.array(imgs)

def resize_images(imgs, y):
    images = []
    for i, img in enumerate(imgs):
        y[i][0] = (y[i][0]/img.shape[1])*150
        y[i][1] = (y[i][1]/img.shape[0])*150
        resized = cv2.resize(img, (150, 150), interpolation = cv2.INTER_AREA)
        images.append(resized)
    labels = y
    return np.array(images), labels

def flip_horizontal(image, label):
    img2 = np.flip(image, 1)
    return img2, [150-label[0]-1, label[1]]

def flip_vertical(image, label):
    img2 = np.flip(image, 0)
    return img2, [label[0], 150-label[1]-1]

def data_augment(images, labels):
    images_new = []
    labels_new = []
    for i in range(2000):
        images_new.append(images[i])
        labels_new.append(labels[i])
    for i in range(2000):
        im, l = flip_horizontal(images[i], labels[i])
        images_new.append(im)
        labels_new.append(l)
    for i in range(2000):
        im, l = flip_vertical(images[i], labels[i])
        images_new.append(im)
        labels_new.append(l)
    for i in range(2000):
        im, l = flip_horizontal(images[i], labels[i])
        im, l = flip_vertical(im, l)
        images_new.append(im)
        labels_new.append(l)
        
    return np.array(images_new), np.array(labels_new)

from google.colab import drive

drive.mount('/content/gdrive', force_remount = True)

import numpy as np
import keras

models = []
for i in range(14):
    json_file = open('/content/gdrive/My Drive/vgg/model_0.json', 'r')
    loaded_model_json = json_file.read()
    json_file.close()
    loaded_model = keras.models.model_from_json(loaded_model_json)
    
    model_path = '/content/gdrive/My Drive/vgg/model_' + str(i) + '.h5'  
    loaded_model.load_weights(model_path)
    print("Loaded model from disk")
    models.append(loaded_model)



from scipy.io import loadmat
import cv2

mat = loadmat('/content/gdrive/My Drive/joints.mat')
data = mat['joints']
print(data.shape)

im = get_images(800)

total = 0
pos = 0
for i in range(14):
    y = get_joint(i)[:800]
    hs = get_joint(13)[:800]
    ns = get_joint(12)[:800]
    im, l = resize_images(im, y)
    im, l = resize_images(im, hs)
    im, l = resize_images(im, ns)
    
    val = np.sqrt(np.square(hs[:,0]-ns[:,0]) + np.square(hs[:,1]-ns[:,1])) / 2
    print('a')
    score = models[i].predict(np.array(im))    
    print('b')
    temp = np.sqrt(np.square(score[:,0]-y[:,0]) + np.square(score[:,1]-y[:,1]))
        
    for i in range(val.shape[0]):
      if temp[i] < val[i]:
        pos = pos + 1
      
      total = total + 1
      print(total)
      
print(pos/total)

total = 0
pos = 0
for i in range(14):
    y = get_joint(i)
    hs = get_joint(13)
    ns = get_joint(12)
    im, l = resize_images(im, y)
    im, l = resize_images(im, hs)
    im, l = resize_images(im, ns)
    
    val = np.sqrt(np.square(hs[:,0]-ns[:,0]) + np.square(hs[:,1]-ns[:,1])) / 2

    score = models[i].predict(np.array(im))    
    temp = np.sqrt(np.square(score[:,0]-y[:,0]) + np.square(score[:,1]-y[:,1]))
        
    for i in range(val.shape[0]):
      if temp[i] < 20:
        pos = pos + 1
      
      total = total + 1
      print(total)
      
pckh = pos/total
print(pckh)

total = 0
pos = 0
for i in range(14):
    y = get_joint(i)
    hs = get_joint(13)
    ns = get_joint(12)
    im, l = resize_images(im, y)
    im, l = resize_images(im, hs)
    im, l = resize_images(im, ns)
    
    val = np.sqrt(np.square(hs[:,0]-ns[:,0]) + np.square(hs[:,1]-ns[:,1])) / 2

    score = models[i].predict(np.array(im))    
    temp = np.sqrt(np.square(score[:,0]-y[:,0]) + np.square(score[:,1]-y[:,1]))
        
    for i in range(val.shape[0]):
      if temp[i] < 30:
        pos = pos + 1
      
      total = total + 1
      print(total)
      
pckh = pos/total
print(pckh)

total = 0
pos = 0
for i in range(14):
    y = get_joint(i)
    hs = get_joint(13)
    ns = get_joint(12)
    im, l = resize_images(im, y)
    im, l = resize_images(im, hs)
    im, l = resize_images(im, ns)
    
    val = np.sqrt(np.square(hs[:,0]-ns[:,0]) + np.square(hs[:,1]-ns[:,1])) / 2

    score = models[i].predict(np.array(im))    
    temp = np.sqrt(np.square(score[:,0]-y[:,0]) + np.square(score[:,1]-y[:,1]))
        
    for i in range(val.shape[0]):
      if temp[i] < 40:
        pos = pos + 1
      
      total = total + 1
      print(total)
      
pckh = pos/total
print(pckh)

total = 0
pos = 0
for i in range(14):
    y = get_joint(i)
    hs = get_joint(13)
    ns = get_joint(12)
    im, l = resize_images(im, y)
    im, l = resize_images(im, hs)
    im, l = resize_images(im, ns)
    
    val = np.sqrt(np.square(hs[:,0]-ns[:,0]) + np.square(hs[:,1]-ns[:,1])) / 2

    score = models[i].predict(np.array(im))    
    temp = np.sqrt(np.square(score[:,0]-y[:,0]) + np.square(score[:,1]-y[:,1]))
        
    for i in range(val.shape[0]):
      if temp[i] < 50:
        pos = pos + 1
      
      total = total + 1
      print(total)
      
pckh = pos/total
print(pckh)

